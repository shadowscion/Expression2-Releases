# https://docs.unity3d.com/ScriptReference/Vector3.OrthoNormalize.html
# dunno if it's correct
function vector orthonormalize(Normal:vector,Tangent:vector) {
    local Normal = Normal:normalized()
    local Tangent = Tangent:normalized()
    return Tangent - Normal * Normal:dot(Tangent)
}
function vector orthonormalize(Normal:vector,Tangent:vector,Bitangent:vector) {
    local Normal = Normal:normalized()
    local Tangent = Tangent:normalized()
    Tangent = Tangent - Normal * Normal:dot(Tangent)
    if (Normal:cross(Tangent):dot(Bitangent) < 0) {
        Tangent = -Tangent
    }
    return Tangent
}
function number signedAngle([From To Axis]:vector) {
    return acos(From:normalized():dot(To:normalized())) * sign(From:cross(To):dot(Axis))
}

function vector ClosestPointOnPlane([PNormal PPosition Point]:vector) {

    local PNormal = PNormal:normalized()

    return Point - (PNormal * (PNormal:dot(Point) - PNormal:dot(PPosition)))

#}



local function ClosestPointOnPlane(pnormal, pposition, point)
	pnormal:Normalize()
	return point - (pnormal * (pnormal:Dot(point) - pnormal:Dot(pposition)))
end

